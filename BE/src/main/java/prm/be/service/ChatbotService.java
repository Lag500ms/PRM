package prm.be.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import prm.be.dto.response.chatbot.ChatbotResponse;
import prm.be.entity.Vehicle;
import prm.be.entity.VehicleInventory;
import prm.be.repository.VehicleRepository;
import prm.be.repository.VehicleInventoryRepository;
import prm.be.repository.OrderRepository;
import prm.be.repository.ScheduleRepository;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatbotService {

    @Value("${gemini.api.key:AIzaSyDFlWOFU0ax64CmChbdt9hrSbljN0fNy0U}")
    private String geminiApiKey;

    @Value("${gemini.api.url:https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent}")
    private String geminiApiUrl;

    private final VehicleRepository vehicleRepository;
    private final VehicleInventoryRepository vehicleInventoryRepository;
    private final OrderRepository orderRepository;
    private final ScheduleRepository scheduleRepository;
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi t·ª´ user v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi th√¥ng minh v·ªõi fallback logic
     */
    public ChatbotResponse processQuestion(String question, String accountId) {
        try {
            // 1. Ph√¢n t√≠ch intent v·ªõi fallback
            String intent = analyzeIntentWithFallback(question);

            // 2. L·∫•y d·ªØ li·ªáu t·ª´ database d·ª±a tr√™n intent
            String data = retrieveDataFromDatabase(intent, accountId);

            // 3. T·∫°o c√¢u tr·∫£ l·ªùi v·ªõi fallback
            String answer = generateAnswerWithFallback(question, data, intent);

            return ChatbotResponse.builder()
                    .answer(answer)
                    .intent(intent)
                    .data(data)
                    .timestamp(new Date())
                    .build();

        } catch (Exception e) {
            log.error("Error processing chatbot question: {}", e.getMessage());
            return ChatbotResponse.builder()
                    .answer("Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi n√†y l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.")
                    .intent("error")
                    .data("")
                    .timestamp(new Date())
                    .build();
        }
    }

    /**
     * Ph√¢n t√≠ch intent v·ªõi fallback logic
     */
    private String analyzeIntentWithFallback(String question) {
        try {
            // Th·ª≠ Gemini AI tr∆∞·ªõc
            return analyzeIntentWithGemini(question);
        } catch (Exception e) {
            log.warn("Gemini API failed, using local pattern matching: {}", e.getMessage());
            // Fallback: Local pattern matching
            return analyzeIntentLocally(question);
        }
    }

    /**
     * Local intent analysis khi Gemini API kh√¥ng available
     */
    private String analyzeIntentLocally(String question) {
        String lowerQuestion = question.toLowerCase().trim();

        // Greeting patterns
        if (lowerQuestion.matches(".*(hello|hi|ch√†o|xin ch√†o|ch√†o b·∫°n|hey).*")) {
            return "greeting";
        }

        // Help patterns
        if (lowerQuestion.matches(".*(help|gi√∫p|h∆∞·ªõng d·∫´n|tr·ª£ gi√∫p).*")) {
            return "help";
        }

        // Inventory patterns
        if (lowerQuestion.matches(".*(kho|inventory|xe trong kho|s·ªë l∆∞·ª£ng xe|c√≥ bao nhi√™u xe).*")) {
            return "inventory_count";
        }

        // Vehicle patterns
        if (lowerQuestion.matches(".*(danh s√°ch xe|list xe|xe n√†o|xe g√¨).*")) {
            return "vehicle_list";
        }

        // Statistics patterns
        if (lowerQuestion.matches(".*(th·ªëng k√™|statistics|b√°o c√°o|doanh s·ªë).*")) {
            return "statistics";
        }

        // Orders patterns
        if (lowerQuestion.matches(".*(ƒë∆°n h√†ng|order|orders).*")) {
            return "orders";
        }

        // Schedules patterns
        if (lowerQuestion.matches(".*(l·ªãch h·∫πn|schedule|appointment).*")) {
            return "schedules";
        }

        // Default to general
        return "general";
    }

    /**
     * Ph√¢n t√≠ch intent c·ªßa c√¢u h·ªèi b·∫±ng Gemini AI v·ªõi system prompt r√µ r√†ng
     */
    private String analyzeIntentWithGemini(String question) {
        try {
            String systemPrompt = """
                    B·∫°n l√† AI Assistant cho h·ªá th·ªëng qu·∫£n l√Ω xe h∆°i c·ªßa dealer.
                    Nhi·ªám v·ª•: Ph√¢n t√≠ch c√¢u h·ªèi v√† x√°c ƒë·ªãnh intent ch√≠nh x√°c.

                    Context:
                    - User l√† DEALER trong h·ªá th·ªëng qu·∫£n l√Ω xe
                    - C√≥ th·ªÉ h·ªèi v·ªÅ kho xe, ƒë∆°n h√†ng, l·ªãch h·∫πn, th·ªëng k√™
                    - C·∫ßn tr·∫£ l·ªùi th√¢n thi·ªán v√† chuy√™n nghi·ªáp

                    C√°c intent c√≥ th·ªÉ:
                    - greeting: Ch√†o h·ªèi (hello, hi, xin ch√†o, ch√†o b·∫°n)
                    - inventory_count: H·ªèi v·ªÅ s·ªë l∆∞·ª£ng xe trong kho
                    - vehicle_list: H·ªèi v·ªÅ danh s√°ch xe
                    - vehicle_details: H·ªèi v·ªÅ chi ti·∫øt xe c·ª• th·ªÉ
                    - statistics: H·ªèi v·ªÅ th·ªëng k√™ doanh s·ªë
                    - orders: H·ªèi v·ªÅ ƒë∆°n h√†ng
                    - schedules: H·ªèi v·ªÅ l·ªãch h·∫πn
                    - help: H·ªèi v·ªÅ c√°ch s·ª≠ d·ª•ng
                    - general: C√¢u h·ªèi chung kh√°c

                    Quy t·∫Øc:
                    1. ∆Øu ti√™n greeting n·∫øu c√≥ t·ª´ ch√†o h·ªèi
                    2. Ph√¢n t√≠ch ng·ªØ c·∫£nh ƒë·ªÉ x√°c ƒë·ªãnh intent ch√≠nh x√°c
                    3. Tr·∫£ v·ªÅ ch·ªâ t√™n intent (v√≠ d·ª•: greeting)
                    """;

            String prompt = String.format("""
                    %s

                    C√¢u h·ªèi c·∫ßn ph√¢n t√≠ch: "%s"

                    Tr·∫£ v·ªÅ ch·ªâ t√™n intent:
                    """, systemPrompt, question);

            String response = callGeminiAPI(prompt);
            return response.trim().toLowerCase();

        } catch (Exception e) {
            log.error("Error analyzing intent: {}", e.getMessage());
            return "general";
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu t·ª´ database d·ª±a tr√™n intent v·ªõi RAG c·∫£i thi·ªán
     */
    private String retrieveDataFromDatabase(String intent, String accountId) {
        try {
            switch (intent) {
                case "greeting":
                    return getGreetingResponse();
                case "help":
                    return getHelpResponse();
                case "inventory_count":
                    return getInventoryCount(accountId);
                case "vehicle_list":
                    return getVehicleList();
                case "vehicle_details":
                    return getVehicleDetails();
                case "statistics":
                    return getStatistics(accountId);
                case "orders":
                    return getOrdersInfo(accountId);
                case "schedules":
                    return getSchedulesInfo(accountId);
                default:
                    return "Kh√¥ng c√≥ d·ªØ li·ªáu c·ª• th·ªÉ cho intent: " + intent;
            }
        } catch (Exception e) {
            log.error("Error retrieving data: {}", e.getMessage());
            return "L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ database";
        }
    }

    /**
     * T·∫°o c√¢u tr·∫£ l·ªùi v·ªõi fallback logic
     */
    private String generateAnswerWithFallback(String question, String data, String intent) {
        try {
            // Th·ª≠ Gemini AI tr∆∞·ªõc
            return generateAnswerWithGemini(question, data);
        } catch (Exception e) {
            log.warn("Gemini API failed for answer generation, using local responses: {}", e.getMessage());
            // Fallback: Local responses
            return generateAnswerLocally(intent, data);
        }
    }

    /**
     * Local answer generation khi Gemini API kh√¥ng available
     */
    private String generateAnswerLocally(String intent, String data) {
        switch (intent) {
            case "greeting":
                return "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω xe h∆°i. T√¥i s·∫Ω gi√∫p b·∫°n qu·∫£n l√Ω kho xe, ƒë∆°n h√†ng v√† l·ªãch h·∫πn c·ªßa c·ª≠a h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ c·ª≠a h√†ng xe h∆°i? üòä";
            case "help":
                return getContextualHelpResponse();
            case "inventory_count":
                return data.isEmpty() ? "Kho c·ªßa b·∫°n hi·ªán t·∫°i ch∆∞a c√≥ xe n√†o. H√£y li√™n h·ªá admin ƒë·ªÉ nh·∫≠n xe v√†o kho!"
                        : data;
            case "vehicle_list":
                return data.isEmpty() ? "Hi·ªán t·∫°i ch∆∞a c√≥ xe n√†o trong h·ªá th·ªëng. H√£y li√™n h·ªá admin ƒë·ªÉ th√™m xe!" : data;
            case "statistics":
                return data.isEmpty() ? "Ch∆∞a c√≥ th·ªëng k√™ c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau." : data;
            case "orders":
                return data.isEmpty() ? "Ch∆∞a c√≥ th√¥ng tin ƒë∆°n h√†ng c·ªßa c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau." : data;
            case "schedules":
                return data.isEmpty() ? "Ch∆∞a c√≥ th√¥ng tin l·ªãch h·∫πn c·ªßa c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau." : data;
            default:
                return "T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ c·ª≠a h√†ng xe h∆°i nh∆∞ng ch∆∞a th·ªÉ tr·∫£ l·ªùi chi ti·∫øt l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c h·ªèi c·ª• th·ªÉ h∆°n! üòä";
        }
    }

    /**
     * T·∫°o c√¢u tr·∫£ l·ªùi th√¥ng minh b·∫±ng Gemini AI v·ªõi system prompt r√µ r√†ng
     */
    private String generateAnswerWithGemini(String question, String data) {
        try {
            String systemPrompt = """
                    B·∫°n l√† AI Assistant chuy√™n nghi·ªáp cho h·ªá th·ªëng qu·∫£n l√Ω xe h∆°i c·ªßa dealer.

                    Vai tr√≤:
                    - H·ªó tr·ª£ dealer qu·∫£n l√Ω kho xe, ƒë∆°n h√†ng, l·ªãch h·∫πn
                    - Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ th·ªëng k√™, b√°o c√°o
                    - T∆∞ v·∫•n v·ªÅ xe h∆°i v√† d·ªãch v·ª•

                    T√≠nh c√°ch:
                    - Th√¢n thi·ªán, chuy√™n nghi·ªáp, nhi·ªát t√¨nh
                    - S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu
                    - Lu√¥n s·∫µn s√†ng h·ªó tr·ª£

                    Quy t·∫Øc tr·∫£ l·ªùi:
                    1. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
                    2. S·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c
                    3. N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, h√£y n√≥i r√µ v√† ƒë·ªÅ xu·∫•t c√°ch kh√°c
                    4. Gi·ªõi h·∫°n trong 200 t·ª´
                    5. Th√™m emoji ph√π h·ª£p ƒë·ªÉ th√¢n thi·ªán
                    6. Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ t∆∞∆°ng t√°c
                    """;

            String prompt = String.format("""
                    %s

                    C√¢u h·ªèi c·ªßa dealer: "%s"
                    D·ªØ li·ªáu t·ª´ database: "%s"

                    T·∫°o c√¢u tr·∫£ l·ªùi th√¥ng minh v√† h·ªØu √≠ch:
                    """, systemPrompt, question, data);

            return callGeminiAPI(prompt);

        } catch (Exception e) {
            log.error("Error generating answer: {}", e.getMessage());
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau! üòä";
        }
    }

    /**
     * G·ªçi Gemini API v·ªõi model ch√≠nh th·ª©c v√† retry mechanism
     */
    private String callGeminiAPI(String prompt) {
        int maxRetries = 3;
        int retryDelay = 1000; // 1 second

        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                String url = geminiApiUrl + "?key=" + geminiApiKey;

                // T·∫°o request body v·ªõi Jackson
                String requestBody = String.format("""
                        {
                            "contents": [{
                                "parts": [{
                                    "text": "%s"
                                }]
                            }]
                        }
                        """, prompt.replace("\"", "\\\"").replace("\n", "\\n"));

                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);

                HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
                ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

                // Parse response v·ªõi Jackson
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                return responseJson.get("candidates")
                        .get(0)
                        .get("content")
                        .get("parts")
                        .get(0)
                        .get("text").asText();

            } catch (Exception e) {
                log.warn("Gemini API attempt {} failed: {}", attempt, e.getMessage());

                if (attempt == maxRetries) {
                    log.error("All Gemini API attempts failed after {} retries", maxRetries);
                    throw new RuntimeException("Gemini API kh√¥ng kh·∫£ d·ª•ng sau " + maxRetries + " l·∫ßn th·ª≠");
                }

                // Wait before retry
                try {
                    Thread.sleep(retryDelay * attempt);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Retry interrupted");
                }
            }
        }

        throw new RuntimeException("Unexpected error in retry logic");
    }

    // C√°c method ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ database
    private String getGreetingResponse() {
        return "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω xe h∆°i. T√¥i s·∫Ω gi√∫p b·∫°n qu·∫£n l√Ω kho xe, ƒë∆°n h√†ng v√† l·ªãch h·∫πn c·ªßa c·ª≠a h√†ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ c·ª≠a h√†ng xe h∆°i? üòä";
    }

    private String getHelpResponse() {
        return getContextualHelpResponse();
    }

    /**
     * T·∫°o help response th√¥ng minh d·ª±a tr√™n context v√† tr·∫°ng th√°i h·ªá th·ªëng
     */
    private String getContextualHelpResponse() {
        try {
            // L·∫•y th√¥ng tin t·ªïng quan h·ªá th·ªëng
            long totalVehicles = vehicleRepository.count();
            long totalInventory = vehicleInventoryRepository.count();
            long totalOrders = orderRepository.count();
            long totalSchedules = scheduleRepository.count();

            StringBuilder helpResponse = new StringBuilder();
            helpResponse.append("ü§ñ **AI Assistant - H·ªá th·ªëng Qu·∫£n l√Ω Xe h∆°i**\n\n");

            // System status
            helpResponse.append("üìä **Tr·∫°ng th√°i h·ªá th·ªëng:**\n");
            helpResponse.append(String.format("‚Ä¢ T·ªïng xe trong h·ªá th·ªëng: %d\n", totalVehicles));
            helpResponse.append(String.format("‚Ä¢ T·ªïng kho xe: %d\n", totalInventory));
            helpResponse.append(String.format("‚Ä¢ T·ªïng ƒë∆°n h√†ng: %d\n", totalOrders));
            helpResponse.append(String.format("‚Ä¢ T·ªïng l·ªãch h·∫πn: %d\n\n", totalSchedules));

            // Main features v·ªõi examples c·ª• th·ªÉ
            helpResponse.append("üéØ **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n\n");

            helpResponse.append("üì¶ **Qu·∫£n l√Ω Kho xe:**\n");
            helpResponse.append("‚Ä¢ \"Kho c·ªßa t√¥i c√≥ bao nhi√™u xe?\"\n");
            helpResponse.append("‚Ä¢ \"Xe n√†o c√≤n √≠t trong kho?\"\n");
            helpResponse.append("‚Ä¢ \"Kho t√¥i c√≥ nh·ªØng xe g√¨?\"\n");
            helpResponse.append("‚Ä¢ \"Xe BMW X5 c√≤n bao nhi√™u?\"\n\n");

            helpResponse.append("üöó **Xe c√≥ s·∫µn ƒë·ªÉ nh·∫≠n:**\n");
            helpResponse.append("‚Ä¢ \"C√≥ nh·ªØng xe n√†o t√¥i c√≥ th·ªÉ nh·∫≠n?\"\n");
            helpResponse.append("‚Ä¢ \"Xe n√†o ƒëang c√≥ s·∫µn?\"\n");
            helpResponse.append("‚Ä¢ \"Xe Tesla Model 3 c√≤n kh√¥ng?\"\n");
            helpResponse.append("‚Ä¢ \"Xe Ferrari c√≥ s·∫µn kh√¥ng?\"\n\n");

            helpResponse.append("üìä **Th·ªëng k√™ & B√°o c√°o:**\n");
            helpResponse.append("‚Ä¢ \"Doanh s·ªë th√°ng n√†y c·ªßa t√¥i?\"\n");
            helpResponse.append("‚Ä¢ \"T√¥i c√≥ bao nhi√™u ƒë∆°n h√†ng?\"\n");
            helpResponse.append("‚Ä¢ \"L·ªãch h·∫πn tu·∫ßn n√†y?\"\n");
            helpResponse.append("‚Ä¢ \"Th·ªëng k√™ b√°n h√†ng c·ªßa t√¥i?\"\n\n");

            helpResponse.append("üîç **T√¨m ki·∫øm & L·ªçc:**\n");
            helpResponse.append("‚Ä¢ \"Xe BMW c√≥ nh·ªØng model n√†o?\"\n");
            helpResponse.append("‚Ä¢ \"Xe m√†u ƒë·ªè c√≤n bao nhi√™u?\"\n");
            helpResponse.append("‚Ä¢ \"Xe gi√° d∆∞·ªõi 2 t·ª∑ c√≥ kh√¥ng?\"\n\n");

            // Quick actions
            helpResponse.append("‚ö° **Quick Actions:**\n");
            helpResponse.append("‚Ä¢ \"Hi·ªán tr·∫°ng kho\" - Xem t·ªïng quan kho\n");
            helpResponse.append("‚Ä¢ \"Xe m·ªõi\" - Xe m·ªõi c√≥ s·∫µn\n");
            helpResponse.append("‚Ä¢ \"B√°o c√°o\" - Th·ªëng k√™ t·ªïng quan\n");
            helpResponse.append("‚Ä¢ \"L·ªãch h·∫πn\" - Xem l·ªãch h·∫πn\n\n");

            // Tips v√† best practices
            helpResponse.append("üí° **M·∫πo s·ª≠ d·ª•ng:**\n");
            helpResponse.append("‚Ä¢ H·ªèi b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n, t√¥i s·∫Ω hi·ªÉu\n");
            helpResponse.append("‚Ä¢ C√≥ th·ªÉ h·ªèi v·ªÅ xe c·ª• th·ªÉ theo t√™n, m√†u, gi√°\n");
            helpResponse.append("‚Ä¢ T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ xu h∆∞·ªõng b√°n xe\n");
            helpResponse.append("‚Ä¢ Lu√¥n s·∫µn s√†ng h·ªó tr·ª£ 24/7!\n\n");

            helpResponse.append("üéâ **B·∫Øt ƒë·∫ßu ngay:** H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ c·ª≠a h√†ng xe h∆°i c·ªßa b·∫°n!");

            return helpResponse.toString();

        } catch (Exception e) {
            log.error("Error generating contextual help: {}", e.getMessage());
            // Fallback to basic help
            return getBasicHelpResponse();
        }
    }

    /**
     * Help response c∆° b·∫£n khi c√≥ l·ªói
     */
    private String getBasicHelpResponse() {
        return """
                ü§ñ **AI Assistant - H·ªá th·ªëng Qu·∫£n l√Ω Xe h∆°i**

                T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
                üì¶ Qu·∫£n l√Ω kho xe
                üöó Xem xe c√≥ s·∫µn
                üìä Th·ªëng k√™ c·ª≠a h√†ng
                üîç T√¨m ki·∫øm xe

                üí° H√£y h·ªèi t√¥i b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n!
                """;
    }

    private String getInventoryCount(String accountId) {
        try {
            // L·∫•y th√¥ng tin chi ti·∫øt inventory c·ªßa dealer
            List<VehicleInventory> dealerInventory = vehicleInventoryRepository.findAll().stream()
                    .filter(vi -> vi.getInventory().getAccount().getId().equals(accountId))
                    .filter(vi -> vi.getQuantity() != null && vi.getQuantity() > 0)
                    .collect(Collectors.toList());

            if (dealerInventory.isEmpty()) {
                return "Kho c·ªßa b·∫°n hi·ªán t·∫°i ch∆∞a c√≥ xe n√†o. H√£y li√™n h·ªá admin ƒë·ªÉ nh·∫≠n xe v√†o kho!";
            }

            // T√≠nh t·ªïng s·ªë xe
            long totalVehicles = dealerInventory.stream()
                    .mapToLong(vi -> vi.getQuantity())
                    .sum();

            // T·∫°o danh s√°ch chi ti·∫øt t·ª´ng xe
            StringBuilder detailInfo = new StringBuilder();
            detailInfo.append(String.format("Kho c·ªßa b·∫°n c√≥ t·ªïng c·ªông %d xe:\n\n", totalVehicles));

            // Group theo category
            Map<String, List<VehicleInventory>> byCategory = dealerInventory.stream()
                    .collect(Collectors.groupingBy(vi -> vi.getVehicle().getCategory().getName()));

            for (Map.Entry<String, List<VehicleInventory>> entry : byCategory.entrySet()) {
                String categoryName = entry.getKey();
                List<VehicleInventory> vehicles = entry.getValue();

                detailInfo.append(String.format("üì¶ **%s:**\n", categoryName));

                for (VehicleInventory vi : vehicles) {
                    String vehicleInfo = String.format("  ‚Ä¢ %s %s (%s) - %d xe\n",
                            vi.getVehicle().getModel(),
                            vi.getVehicle().getVersion(),
                            vi.getVehicle().getColor(),
                            vi.getQuantity());
                    detailInfo.append(vehicleInfo);
                }
                detailInfo.append("\n");
            }

            return detailInfo.toString().trim();
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kho c·ªßa b·∫°n";
        }
    }

    private String getVehicleList() {
        try {
            // L·∫•y danh s√°ch vehicles c√≥ s·∫µn ƒë·ªÉ dealer c√≥ th·ªÉ nh·∫≠n v√†o inventory
            List<Vehicle> vehicles = vehicleRepository.findAll().stream()
                    .filter(v -> v.getQuantity() > 0) // Ch·ªâ l·∫•y xe c√≤n h√†ng
                    .collect(Collectors.toList());

            if (vehicles.isEmpty()) {
                return "Hi·ªán t·∫°i ch∆∞a c√≥ xe n√†o trong h·ªá th·ªëng. H√£y li√™n h·ªá admin ƒë·ªÉ th√™m xe!";
            }

            // T·∫°o danh s√°ch chi ti·∫øt
            StringBuilder detailInfo = new StringBuilder();
            detailInfo.append("C√°c xe c√≥ s·∫µn ƒë·ªÉ b·∫°n nh·∫≠n v√†o kho:\n\n");

            // Group theo category
            Map<String, List<Vehicle>> byCategory = vehicles.stream()
                    .collect(Collectors.groupingBy(v -> v.getCategory().getName()));

            for (Map.Entry<String, List<Vehicle>> entry : byCategory.entrySet()) {
                String categoryName = entry.getKey();
                List<Vehicle> categoryVehicles = entry.getValue();

                detailInfo.append(String.format("üöó **%s:**\n", categoryName));

                for (Vehicle vehicle : categoryVehicles) {
                    String vehicleInfo = String.format("  ‚Ä¢ %s %s (%s) - C√≤n %d xe\n",
                            vehicle.getModel(),
                            vehicle.getVersion(),
                            vehicle.getColor(),
                            vehicle.getQuantity());
                    detailInfo.append(vehicleInfo);
                }
                detailInfo.append("\n");
            }

            return detailInfo.toString().trim();
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y danh s√°ch xe c√≥ s·∫µn";
        }
    }

    private String getVehicleDetails() {
        try {
            List<Vehicle> vehicles = vehicleRepository.findAll();
            if (vehicles.isEmpty()) {
                return "Kh√¥ng c√≥ xe n√†o trong h·ªá th·ªëng";
            }

            Vehicle vehicle = vehicles.get(0); // L·∫•y xe ƒë·∫ßu ti√™n l√†m v√≠ d·ª•
            return String.format("Xe: %s %s, M√†u: %s, Gi√°: %s, S·ªë l∆∞·ª£ng: %d",
                    vehicle.getModel(), vehicle.getVersion(), vehicle.getColor(),
                    vehicle.getPrice(), vehicle.getQuantity());
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt xe";
        }
    }

    private String getStatistics(String accountId) {
        try {
            long totalOrders = orderRepository.findByAccount_Id(accountId,
                    org.springframework.data.domain.PageRequest.of(0, Integer.MAX_VALUE)).getTotalElements();

            long totalSchedules = scheduleRepository.findByAccount_Id(accountId,
                    org.springframework.data.domain.PageRequest.of(0, Integer.MAX_VALUE)).getTotalElements();

            return String.format("Th·ªëng k√™: %d ƒë∆°n h√†ng, %d l·ªãch h·∫πn", totalOrders, totalSchedules);
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™";
        }
    }

    private String getOrdersInfo(String accountId) {
        try {
            long totalOrders = orderRepository.findByAccount_Id(accountId,
                    org.springframework.data.domain.PageRequest.of(0, Integer.MAX_VALUE)).getTotalElements();
            return String.format("B·∫°n c√≥ %d ƒë∆°n h√†ng", totalOrders);
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng";
        }
    }

    private String getSchedulesInfo(String accountId) {
        try {
            long totalSchedules = scheduleRepository.findByAccount_Id(accountId,
                    org.springframework.data.domain.PageRequest.of(0, Integer.MAX_VALUE)).getTotalElements();
            return String.format("B·∫°n c√≥ %d l·ªãch h·∫πn", totalSchedules);
        } catch (Exception e) {
            return "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l·ªãch h·∫πn";
        }
    }
}
